import {
  ConflictException,
  Inject,
  Injectable,
  InternalServerErrorException,
  NotFoundException,
} from '@nestjs/common';
import { IOrder } from '../shared/entities/order.interface';
import { FilmsService } from '../films/films.service';
import { checkOccupiedSeats } from '../utils/films.utils';
import { IOrderRepository } from 'src/shared/repositories/order.repository.interface';

@Injectable()
export class OrderService {
  constructor(
    @Inject('ORDER_REPOSITORY_TOKEN')
    private readonly ordersRepository: IOrderRepository,
    private readonly filmService: FilmsService,
  ) {}

  async createOrder(order: IOrder): Promise<IOrder> {
    console.log('üõí Creating order:', order);

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞
    const taken = await this.filmService.getOccupatedSeats(order.tickets);
    console.log('   Taken seats from DB:', taken);

    // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: taken –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–≤—Å–µ –º–µ—Å—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
    const sessionExists = await this.filmService.getSession(
      order.tickets[0].sessionId,
    );
    if (!sessionExists) {
      console.log('   ‚ùå Session does not exist');
      throw new NotFoundException('–§–∏–ª—å–º–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ–∞–Ω—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç—ã –ª–∏ –º–µ—Å—Ç–∞
    const checkResult = checkOccupiedSeats(taken, order.tickets);
    console.log('   Seat check result:', checkResult);

    if (!checkResult) {
      throw new ConflictException('–ú–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã');
    }

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    const savedOrder = await this.ordersRepository.addOrder(order);
    if (!savedOrder) {
      throw new InternalServerErrorException('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–µ —É–¥–∞–ª–æ—Å—å');
    }

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞
    const updatedSeats = await this.filmService.setOccupatedSeats(
      order.tickets,
    );
    if (!updatedSeats) {
      console.error(
        'Failed to update occupied seats for order:',
        savedOrder.id,
      );
    }
    console.log('   ‚úÖ Order created successfully:', savedOrder);
    return savedOrder;
  }
}
